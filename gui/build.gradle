
apply plugin: "kotlin2js"
apply plugin: "war"
apply plugin: "maven-publish"

buildscript {
    ext.kotlin_version = "1.1.4-dev-600"

    repositories {
        mavenCentral()
        maven {
            url  "https://dl.bintray.com/kotlin/kotlin-dev/"
        }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

repositories {
    mavenCentral()
    maven {
        url  "https://dl.bintray.com/kotlin/kotlin-dev/"
    }
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-js:$kotlin_version"
    compile "org.jetbrains.kotlinx:kotlinx-html-js:bootstrap-1.1.4-dev-58-49"
}

task copySharedSources(type: Copy) {
    description "Copy shared sources from shared module."
    from "../shared/src/main"
    into "/build/generated-src"
}

sourceSets {
    main.kotlin.srcDirs += '/build/generated-src/kotlin'
}

compileKotlin2Js {
    dependsOn(copySharedSources)
    kotlinOptions.sourceMap = true
}

task downloadDependencies(type: Copy) {
    description "Download dependent jars into libs directory."
    dependsOn jar
    from configurations.compile
    into "/build/libs"
}

task addSourcesToJS(type: Copy) {
    description "Add sources into js directory"
    dependsOn copySharedSources
    from("src/main/kotlin") {
        into "ksafe-gui-src/kotlin"
    }
    from("build/generated-src/kotlin") {
        into "ksafe-gui-generated-src/kotlin"
    }
    into "build/js"
}

task extractJSJars {
    description "Extract jars with javascript into js directory."

    dependsOn jar, downloadDependencies

    def guiJars = fileTree("build/libs").include('*.jar')
    def guiOutputDir = "build/js"

    inputs.files(guiJars)
    outputs.dir(guiOutputDir)

    doLast {
        def guiContent = guiJars.collect { jarContent ->
            zipTree(jarContent).filter {file->
                file.path.endsWith(".js") || file.path.endsWith(".map")
            }
        }
        copy {
            from guiContent
            into guiOutputDir

            filesMatching("*.map") {
                filter { line ->
                    line
                            .replace("file://C:/projects/safe/ksafe/ksafe/gui/src/main/kotlin", "ksafe-gui-src/kotlin")
                            .replace("file://C:/projects/safe/ksafe/ksafe/gui/build/generated-src/kotlin", "ksafe-gui-generated-src/kotlin")
                }
            }
        }
    }
}

war {
    dependsOn extractJSJars
    dependsOn addSourcesToJS
    inputs.dir("${projectDir}/build/js")
    from("${projectDir}/build/js") {
        into "js"
    }
    war.classpath = fileTree("${projectDir}/javalibs")//does not exist
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
}